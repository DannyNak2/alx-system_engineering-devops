Simple Web Infrastructure (1 Server)
Architecture (Text Diagram)

User's Browser
       |
   Internet
       |
[ Domain: www.foobar.com ]
       |
 DNS resolves to IP (8.8.8.8)
       |
+--------------------------------+
|        Single Server           |
| IP: 8.8.8.8                    |
|                                |
|  [ Nginx - Web Server ]        |
|         ↓                      |
|  [ Application Server ]        |
|         ↓                      |
|  [ MySQL Database ]            |
|                                |
|  Application Files (Code Base) |
+--------------------------------+

How It Works (Step-by-Step)
User Requests the Website

The user types www.foobar.com into their browser.

The browser queries the DNS to find the IP address of the domain.

DNS Resolution

The www record is a CNAME or A record pointing to 8.8.8.8 (our server’s public IP).

DNS returns the IP to the browser.

Connection to Server

The browser sends an HTTP/HTTPS request to 8.8.8.8 over the internet.

The server receives the request.

Web Server (Nginx)

Nginx handles the incoming request.

If it’s a static file (CSS, JS, images), Nginx serves it directly.

If it’s a dynamic request (e.g., fetching user profile data), Nginx passes it to the application server.

Application Server

Runs the backend code (e.g., PHP, Python, or Node.js).

Processes the request, which may involve business logic and database queries.

Database (MySQL)

Stores and retrieves persistent data.

The application server sends SQL queries to MySQL and processes the results.

Response Sent Back

Application server returns the generated content (HTML, JSON, etc.) to Nginx.

Nginx sends the response back to the user’s browser.

Roles of Each Component
Server:
A physical or virtual machine that runs services and stores data, responding to requests over the network.

Domain Name (foobar.com):
Human-readable address that maps to the server’s IP address.

www DNS Record:
A subdomain record (usually an A record or CNAME) that points www.foobar.com to 8.8.8.8.

Web Server (Nginx):
Handles HTTP/HTTPS requests, serves static content, and forwards dynamic requests to the application server.

Application Server:
Executes the application code, processes logic, and interacts with the database.

Database (MySQL):
Stores persistent data like user accounts, product info, blog posts, etc.

Communication Protocol:
Uses HTTP or HTTPS over TCP/IP to communicate with the user’s computer.

Issues with This Infrastructure
Single Point of Failure (SPOF):
If the single server fails, the entire website goes down.

Downtime During Maintenance:
Updating code or restarting services causes temporary unavailability.

No Scalability:
One server can only handle a limited amount of traffic; high loads cause slowdowns or crashes.